//给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。
//
// 你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。
//
// 示例:
//
// 给定 nums = [2, 7, 11, 15], target = 9
//
//因为 nums[0] + nums[1] = 2 + 7 = 9
//所以返回 [0, 1]
//
// Related Topics 数组 哈希表


import java.sql.Array;
import java.util.Arrays;
import java.util.HashMap;

//leetcode submit region begin(Prohibit modification and deletion)
class Solution {
    /**
     * use hashMap O(n) // or use array int[target] instead use hashMap if target is small
     * @param nums
     * @param target
     * @return
     */
    public int[] twoSum(int[] nums, int target) {
        int diffNum;
        HashMap<Integer, Integer> numKeyValue = new HashMap();
        for ( int i = 0; i < nums.length; i++ ) {
            if ( numKeyValue.get(nums[i]) != null) {
                return new int[]{numKeyValue.get(nums[i]), i};
            }
            numKeyValue.put(target - nums[i], i);
        }
        return new int[2];
    }

    /**
     *  o(n^2)
     * @param nums
     * @param target
     * @return
     */
    public int[] twoSum1(int[] nums, int target) {
        for (int i = 0; i < nums.length - 1; i++ ) {
            for (int j = i + 1; j < nums.length; j ++) {
                if (nums[i] + nums[j] == target) {
                    return new int[]{i, j};
                }
            }
        }
        return new int[2];
    }

    /**
     * use two pointer (left/ right) in sorted array 假设每种输入只会对应一个答案
     * lose old index (changed index)
     * @param nums
     * @param target
     * @return
     */
    /*public int[] twoSum2(int[] nums, int target) {
        int left = 0, right = nums.length - 1, sum;
        int[] numsCopy = Arrays.copyOf(nums, nums.length);
        Arrays.sort(numsCopy);
        while (left < right) {
            sum = nums[left] + nums[right];
            if (sum > target) {
                right--;
            } elseif (sum < target) {
                left++;
            } else {
                return new int[]{left, right};
            }
        }
        return new int[2];
    }*/
}
//leetcode submit region end(Prohibit modification and deletion)
