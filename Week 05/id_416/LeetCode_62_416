/**
 * 一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” ）。
 *
 * 机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。
 *
 * 问总共有多少条不同的路径？
 *
 *
 *
 * 例如，上图是一个7 x 3 的网格。有多少可能的路径？
 *
 * 说明：m 和 n 的值均不超过 100。
 *
 * 示例 1:
 *
 * 输入: m = 3, n = 2
 * 输出: 3
 * 解释:
 * 从左上角开始，总共有 3 条路径可以到达右下角。
 * 1. 向右 -> 向右 -> 向下
 * 2. 向右 -> 向下 -> 向右
 * 3. 向下 -> 向右 -> 向右
 * 示例 2:
 *
 * 输入: m = 7, n = 3
 * 输出: 28
 *
 * 来源：力扣（LeetCode）
 * 链接：https://leetcode-cn.com/problems/unique-paths
 * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 */
class LeetCode_62_416 {

    //递归 + 优化搜索
    public int uniquePaths(int m, int n) {
        int[][] nums = new int[m][n];
        return circle(m - 1,n - 1,nums);
    }

    public int circle(int m,int n,int[][] nums){
        if(m == 0 || n == 0) return 1;
        if( nums[m][n] == 0 ){
            nums[m][n] = circle(m - 1,n ,nums) + circle(m,n - 1,nums);
        }
        return nums[m][n];
    }
    //动态规划
    public int uniquePaths(int m,int n){
        int[][] map = new int[m][n];
        for(int i = 0;i < m;i++) map[i][0] = 1;
        for(int i = 0;i < n;i++) map[0][j] = 1;
        for(int i = 1;i < m;i++){
            for(j = 1;j < n;j++){
                map[i][j] = map[i - 1][j] + map[i][j - 1];
            }
        }
        return map[m - 1][n - 1];
    }
    //动态规划，极简版本
    public int uniquePaths(int m,int n){
        int[] dep = new int[n];
        dep[0] = 1;
        for(int i = 0;i<m;i++){
            for(int j = 1;j<n;j++){
                dep[j]+=dep[j-1];
            }
        }
        return dep[n - 1];
    }
}