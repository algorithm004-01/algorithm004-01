

1. DFS搜索模板：
   (主要用于图， 树建议使用前中后序遍历)， 因为图是环状的，所以需要
   使用visited标志位来判断是否已经访问过。而树是有终点的。
   之前二叉树的前中后序遍历都是DFS的子集。只是二叉树的只有左右两个子节点。


  function wrap(root) {
      let visited = new Set()
      
      function DFS(node, visited) {
          if(visited.has(node)) { // 节点访问过就结束
              return
          }
          for(let node of node.children) {
              DFS(node, visited)
          }
      }
  }


2. BFS搜索模板;
    特点是需要根据节点(如果没有节点自己创造节点)，来判断需不需要放入queue中处理，queue为空则说明没有更多节点，遍历结束

 function BFS(root) {
    let queue = [], ans = []
    queue.push(root)
    while(queue.length) {
        let node = queue.shift()
        ans.push(node)
        if(node.left !== null) { // 这里只是个判断放入queue的条件，可以自己创建节点包裹问题，创造条件
            queue.push(node.left)
        }
        if(node.right !== null) {
            queue.push(node.right)
        }
    }
    return ans
 }

 3. 二分查找: 针对有序，有界， 能通过索引访问。 数组， 链表等
        
    function BinarySearch(list, target) {
        let left = 0, right = list.length - 1

        while(left <= right) { //是否等于，需要判断
            let mid = left + parseInt((right - left) / 2)
            if(list[mid] === target) {
                return mid
            }else if(list[mid] < target) {
                left = mid + 1
            }else {
                right = mid - 1
            }
        }
    }
