//给定一个非负整数数组，你最初位于数组的第一个位置。
//
// 数组中的每个元素代表你在该位置可以跳跃的最大长度。
//
// 你的目标是使用最少的跳跃次数到达数组的最后一个位置。
//
// 示例:
//
// 输入: [2,3,1,1,4]
//输出: 2
//解释: 跳到最后一个位置的最小跳跃数是 2。
//     从下标为 0 跳到下标为 1 的位置，跳 1 步，然后跳 3 步到达数组的最后一个位置。
//
//
// 说明:
//
// 假设你总是可以到达数组的最后一个位置。
// Related Topics 贪心算法 数组



//leetcode submit region begin(Prohibit modification and deletion)
class Solution {
    public int jump(int[] nums) {
        rif (nums.length == 1)
        return 0;
        return jumpRoad(0, 1, Integer.MAX_VALUE, nums);
    }

    public int jumpRoad(int index, int count, int maxNum, int[] nums) {
        int step;
        for (int i = nums[index] + index; i > index; i--) {
            if (i >= nums.length - 1) {
                return count;
            }
            step = jumpRoad(i, count + 1, maxNum, nums);
            if (step < maxNum) {
                maxNum = step;
            }
        }

        public int jump1(int[] nums) {
            return jumpNum(nums[0], nums, 1);
        }

        public int jumpNum(int maxReachIndex, int[] nums, int step) {
            if (maxReachIndex >= nums.length - 1)
                return step;
            for (int i = current + 1; i < maxReachIndex; i++) {
                if (nums[i] + i > maxReachIndex + nums[maxReachIndex]) {
                    maxReachIndex = nums[i] + i;
                }
            }
            return jumpNum(maxReachIndex, nums, step++);
        }
    }
//leetcode submit region end(Prohibit modification and deletion)
