//编写一个高效的算法来判断 m x n 矩阵中，是否存在一个目标值。该矩阵具有如下特性：
//
//
// 每行中的整数从左到右按升序排列。
// 每行的第一个整数大于前一行的最后一个整数。
//
//
// 示例 1:
//
// 输入:
//matrix = [
//  [1,   3,  5,  7],
//  [10, 11, 16, 20],
//  [23, 30, 34, 50]
//]
//target = 3
//输出: true
//
//
// 示例 2:
//
// 输入:
//matrix = [
//  [1,   3,  5,  7],
//  [10, 11, 16, 20],
//  [23, 30, 34, 50]
//]
//target = 13
//输出: false
// Related Topics 数组 二分查找



//leetcode submit region begin(Prohibit modification and deletion)
class Solution {
    /**
     * 时间复杂度为O(LOGM + LOGN)
     * M: 矩阵的长度   N ：矩阵的列数
     * @param matrix
     * @param target
     * @return
     */
    public boolean searchMatrix(int[][] matrix, int target) {
        if (matrix.length == 0 || matrix[0].length == 0)
            return false;
        int left = 0, right = matrix.length - 1, middle, n = matrix[0].length - 1;
        while (left <= right) {
            middle = left + (right - left) / 2;
            if (target > matrix[middle][n]) {
                left = middle + 1;
            } else if (target < matrix[middle][0]) {
                right = middle - 1;
            } else {
                return search(matrix[middle], target);
            }
        }
        return false;
    }

    public boolean search(int[] nums, int target) {
        int left = 0, right = nums.length - 1, middle;
        while (left <= right) {
            middle = left + (right - left) / 2;
            if (nums[middle] == target)
                return true;
            if (nums[middle] > target) {
                right = middle - 1;
            } else {
                left = middle + 1;
            }
        }
        return false;
    }
}
//leetcode submit region end(Prohibit modification and deletion)
