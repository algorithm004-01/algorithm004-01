// 1.最长上升子序列（longest-increasing-subsequence）
// idea:
// explanation: e.g = [10, 9, 2, 5, 3, 7, 101, 8]
// initial condition: dp = [1] * len(nums), 初始值都为1, dp[i]的意思是以nums[i]结尾的最长上升子序列的长度
// 开始一个一个看：
// 10: dp[0] = 1
// 9(<10): dp[1] = 1
// 2(<10 || < 9): dp[2] = 1
// 5(>2): dp[3] = max(dp[2] + 1) = 2
// 3(>2): dp[4] = max(dp[2] + 1) = 2
// 7(>2 || >5 || >3): dp[5] = max(dp[2]+1,dp[3]+1,dp[4]+1) = 3
// 101(>10 || >9 || >2 || >5 || >3 || >7): dp[6] = max(dp[0]+1, dp[1]+1, dp[2]+1, dp[3]+1, dp[4]+1, dp[5]+1)=4
// 18(>10 || >9 || >2 || >5 || >3 || >7): dp[7] = max(dp[0]+1, dp[1]+1, dp[2]+1, dp[3]+1, dp[4]+1, dp[5]+1) = 4

import java.util.Arrays;

class Solution {
    public int lengthOfLIS(int[] nums) {
        int len = nums.length;
        if (len == 0) {
            return 0;
        }
        
        // define the dp and initialize with all 1 elements
        int[] dp = new int[len];
        Arrays.fill(dp, 1);
        
        for (int i = 1; i < len; i++) {
            int curVal = nums[i]; // the current value
            // for those elements ahead of curVal
            for (int j = 0; j < i; j++) {
                if (curVal > nums[j]) {
                    dp[i] = Math.max(dp[j] + 1, dp[i]); // notice that the initial value is 1(dp[i]=1)
                }
            }
        }
        
        // print the max value in dp
        int res = dp[0];
        for (int i = 0; i < len; i++) {
            res = Integer.max(res, dp[i]);
        }
        return res;
    }
}

// 2.最长有效括号(longest-valid-parentheses)

public class Solution {
    public int longestValidParentheses(String s) {
        int left = 0, right = 0, maxlength = 0;
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == '(') {
                left++;
            } else {
                right++;
            }
            if (left == right) {
                maxlength = Math.max(maxlength, 2 * right);
            } else if (right >= left) {
                left = right = 0;
            }
        }
        left = right = 0;
        for (int i = s.length() - 1; i >= 0; i--) {
            if (s.charAt(i) == '(') {
                left++;
            } else {
                right++;
            }
            if (left == right) {
                maxlength = Math.max(maxlength, 2 * left);
            } else if (left >= right) {
                left = right = 0;
            }
        }
        return maxlength;
    }
}
